{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","components/ProductItem/index.js","utils/actions.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Sucess.js","utils/reducers.js","redux/store.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","ProductItem","item","state","useSelector","dispatch","useDispatch","cart","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","product","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","currentCategory","useQuery","loading","data","useEffect","products","forEach","then","length","filter","category","map","key","spinner","CategoryMenu","categories","categoryData","id","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","cartOpen","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","Success","addOrder","setTimeout","saveOrder","defaultState","reducer","action","newState","createStore","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","client","ApolloClient","operation","setContext","headers","authorization","uri","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.52ddfefe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\n\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    /*\n      So now whenever we run this idbPromise() function,\n      we establish a connection to the database. Remember\n      that with IndexedDB, the .onupgradeneeded() event\n      only runs if the browser notices that the version\n      number in the .open() method has changed since the\n      last time, or if the browser has never connected\n      to the database before and 1 is the new version.\n      Any other time this code executes and the version \n      is still 1, the .onupgradeneeded() will not run.\n    */\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function(e) {\n            \n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n  \n      // if there's any errors, let us know\n      db.onerror = function(e) {\n      console.log('error', e);\n      };\n\n      /*\n      check which value we passed into the function as a method and perform \n      that method on the object store:\n      */\n  \n      switch (method) {\n          case 'put':\n            store.put(object);\n            resolve(object);\n            break;\n          case 'get':\n            const all = store.getAll();\n            all.onsuccess = function() {\n              resolve(all.result);\n            };\n            break;\n          case 'delete':\n            store.delete(object._id);\n            break;\n          default:\n            console.log('No valid method');\n            break;\n        }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function() {\n      db.close();\n      };\n    };\n\n  });\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\n// commented out in favor of redux logic\n//import { useStoreContext } from \"../../utils/GlobalState\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductItem(item) {\n  // commented out in favor of redux logic\n  //const [state, dispatch] = useStoreContext();\n  const state = useSelector((state) => {\n    return state\n  });\n  const dispatch = useDispatch();\n\n  const { cart } = state;\n\n  // deconstruct item object\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n\n \n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  }\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","// Global State Store targetting the Apollo data\nexport const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n\n// Global State Store targetting the UI shopping cart\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';\n","import gql from 'graphql-tag';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n{\n  categories {\n    _id\n    name\n  }\n}\n`;\n\nexport const QUERY_USER = gql`\n{\n  user {\n    firstName\n    lastName\n    orders {\n      _id\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        image\n      }\n    }\n  }\n}\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;","import React, { useEffect } from 'react';\n// commented out in favor of redux logic\n//import { useStoreContext } from '../../utils/GlobalState';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { useQuery } from '@apollo/react-hooks';\n\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\"\n\n//import IndexDB helper which will allow the app to talk\n// to the database\nimport { idbPromise } from \"../../utils/helpers\";\n\n// currentCategory props is no longer used as is part of the \n//function ProductList({ currentCategory }) {\n// global state\n\nfunction ProductList({}) {\n\n  // commented out in favor of redux logic\n  //const [state, dispatch] = useStoreContext();\n  const state = useSelector((state) => {\n    return state\n  });\n  const dispatch = useDispatch();\n\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  //const products = data?.products || [];\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      // but let's also take each product and save it to IndexedDB using the helper function \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    } else if (!loading) {\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing\n        console.log(\"I am offline\")\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      })\n    }\n  }, [loading, data, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n \n\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n            {filterProducts().map(product => (\n                <ProductItem\n                  key= {product._id}\n                  _id={product._id}\n                  image={product.image}\n                  name={product.name}\n                  price={product.price}\n                  quantity={product.quantity}\n                />\n            ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      { loading ? \n      <img src={spinner} alt=\"loading\" />: null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\n\n// Provider Global Store import\n// commented out in favor of redux logic\n//import { useStoreContext } from \"../../utils/GlobalState\";\nimport { useDispatch, useSelector } from 'react-redux';\n\n// Import IndexDB helper which will allow the app to talk\n// to the database\nimport { idbPromise } from '../../utils/helpers';\n\n// setCategory  was used before adding our handleclick\n//function CategoryMenu({ setCategory }) {\n// therefore it can be removed from the prop as we are using the \n// global sate\n\nfunction CategoryMenu({}) {\n  // Before migrating to use global Store\n  //const { data: categoryData } = useQuery(QUERY_CATEGORIES);\n  //const categories = categoryData?.categories || [];\n\n  // commented out in favor of redux logic\n  //const [state, dispatch] = useStoreContext();\n  const state = useSelector((state) => {\n    return state\n  });\n  const dispatch = useDispatch();\n\n  const { categories } = state;\n  // loading will be used for offline capabilities\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      // also add to indexDB\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      console.log(\"I am offline\")\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n\n    }\n  }, [loading, categoryData, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  // on click before global state was setCategory(item._id);\n  // now is handleClick(item._id);\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\n// commented out in favor of redux logic\n//import { useStoreContext } from '../../utils/GlobalState';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from \"../../utils/helpers\";\n\nconst CartItem = ({ item }) => {\n\n\n      /*\n    Note that we only destructured the dispatch() \n    function from the useStoreContext Hook,\n    because the CartItem component has no \n    need to read state. \n    */\n    // commented out in favor of redux logic  \n    //const [, dispatch] = useStoreContext();\n    const state = useSelector((state) => {\n      return state\n    });\n    const dispatch = useDispatch();\n\n    const removeFromCart = item => {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n      idbPromise('cart', 'delete', { ...item });\n    };\n    \n    const onChange = (e) => {\n      const value = e.target.value;\n    \n      if (value === '0') {\n        dispatch({\n          type: REMOVE_FROM_CART,\n          _id: item._id\n        });\n      \n        idbPromise('cart', 'delete', { ...item });\n      } else {\n        dispatch({\n          type: UPDATE_CART_QUANTITY,\n          _id: item._id,\n          purchaseQuantity: parseInt(value)\n        });\n      \n        idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n      }\n\n    };\n\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from \"react\";\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css';\n//commented out in favor of redux logic\n//import { useStoreContext } from '../../utils/GlobalState';\nimport { useDispatch, useSelector } from 'react-redux';\n// stripe checkout api\n// to be used as part of the button checkout process\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport { QUERY_CHECKOUT } from \"../../utils/queries\"\n\n// API key in context of REACT as testing key.\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n\n  /*\n  You'll use the custom useStoreContext Hook to establish \n  a state variable and the dispatch() function to update\n  the state. In this case, dispatch() will call the TOGGLE_CART\n  action. In the Cart functional component, write the following code:\n  */\n\n  // Commented out in favor of redux logic\n  //const [state, dispatch] = useStoreContext();\n\n  const state = useSelector((state) => {\n    return state\n  });\n\n  const dispatch = useDispatch();\n\n  // using lazyQuery to be used as part of the checkout function\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    };\n  \n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  // use effect for checkout lazyhook\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n  \n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n    // jsx component befor\n    //<div className=\"close\">[close]</div>\n    // after <div className=\"close\" onClick={toggleCart}>[close]</div>\n\n    /*we call the action and the resolver will give return \n            case TOGGLE_CART:\n    return {\n      ...state,\n      cartOpen: !state.cartOpen\n    };\n    */\n   // at this poit state.cartOpen is !state.cartOpen\n\n   // call our QUERY_CHECKOUT query\n       // handle stripe checkout\n       function submitCheckout() {\n        const productIds = [];\n    \n        state.cart.forEach((item) => {\n          for (let i = 0; i < item.purchaseQuantity; i++) {\n            productIds.push(item._id);\n          }\n        });\n    \n        getCheckout({\n          variables: { products: productIds }\n        });\n      }\n\n    if (!state.cartOpen) {\n      return (\n        <div className=\"cart-closed\" onClick={toggleCart}>\n          <span\n            role=\"img\"\n            aria-label=\"trash\">🛒</span>\n        </div>\n      );\n    }\n    \n\n\n  return (\n\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map(item => (\n            <CartItem key={item._id} item={item} />\n          ))}\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n            {\n              Auth.loggedIn() ?\n              <button onClick={submitCheckout}>\n              Checkout\n             </button>\n                :\n                <span>(log in to check out)</span>\n            }\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n\n  );\n};\n\n/*\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      <div>\n          <CartItem item={{name:'Camera', image:'camera.jpg', price:5, purchaseQuantity:3}} />\n          <CartItem item={{name:'Soap', image:'soap.jpg', price:6, purchaseQuantity:4}} />\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: $0</strong>\n            {\n              Auth.loggedIn() ?\n                <button>\n                  Checkout\n                </button>\n                :\n                <span>(log in to check out)</span>\n            }\n          </div>\n        </div>\n    </div>\n    */\n\nexport default Cart;","import React, { useState } from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart';\n\n// Before being managed globally\n// const Home = () => {\n//   const [currentCategory, setCategory] = useState(\"\");\n\n//   before being managed globally\n//   return (\n//     <div className=\"container\">\n//       <CategoryMenu setCategory={setCategory} />\n//       <ProductList currentCategory={currentCategory} />\n//     </div>\n//   );\n\n \n// };\n\n // after being managed globally\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\nimport Cart from \"../components/Cart\";\n// remove as we will use redux store\n//import { useStoreContext } from \"../utils/GlobalState\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from \"../utils/actions\";\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport { idbPromise } from \"../utils/helpers\";\nimport spinner from '../assets/spinner.gif'\n\nfunction Detail() {\n  // commented out in favor of redux logic for useStoreContext\n  //const [state, dispatch] = useStoreContext();\n  // redux useStoreContent logic\n  const state = useSelector((state) => {\n    return state\n  });\n  const dispatch = useDispatch();\n\n  \n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } \n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n\n    }\n  }\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  // check if there is anything in cart then display also.\n  return (\n    <>\n      {currentProduct && cart ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ← Back to Products\n          </Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>\n            {currentProduct.description}\n          </p>\n\n          <p>\n            <strong>Price:</strong>\n            ${currentProduct.price}\n            {\" \"}\n            <button onClick={addToCart}>\n              Add to Cart\n            </button>\n            <button \n              disabled={!cart.find(p => p._id === currentProduct._id)} \n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {\n        loading ? <img src={spinner} alt=\"loading\" /> : null\n      }\n      <Cart />\n    </>\n  );\n};\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import gql from 'graphql-tag';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      } \n      }\n    }\n  }\n`;\n\n\nexport const ADD_USER = gql`\n  mutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\n    addUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;","import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { Link } from \"react-router-dom\";\nimport { LOGIN } from \"../utils/mutations\"\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' })\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e)\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">\n        ← Go to Signup\n      </Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {\n          error ? <div>\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\n          </div> : null\n        }\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email, password: formState.password,\n        firstName: formState.firstName, lastName: formState.lastName\n      }\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">\n        ← Go to Login\n      </Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Jumbotron from \"../components/Jumbotron\";\nimport { ADD_ORDER } from \"../utils/mutations\";\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Success() {\n  const [addOrder] = useMutation(ADD_ORDER);\n\n  useEffect(() => {\n    async function saveOrder() {\n      const cart = await idbPromise('cart', 'get');\n      const products = cart.map(item => item._id);\n      \n      if (products.length) {\n        const { data } = await addOrder({ variables: { products } });\n        const productData = data.addOrder.products;\n    \n        productData.forEach((item) => {\n          idbPromise('cart', 'delete', item);\n        });\n      }\n        \n      setTimeout(() => {\n        window.location.assign('/');\n      }, 3000);\n    }\n\n    saveOrder();\n  }, [addOrder]);\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1>Success!</h1>\n        <h2>\n          Thank you for your purchase!\n        </h2>\n        <h2>\n          You will now be redirected to the home page\n        </h2>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default Success;\n","// commented out in favor of redux logic\n//import { useReducer } from 'react';\n\n// actions to take\nimport {\n  UPDATE_PRODUCTS,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  ADD_TO_CART,\n  ADD_MULTIPLE_TO_CART,\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  CLEAR_CART,\n  TOGGLE_CART\n} from './actions';\n\nconst defaultState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: '',\n}\n  \n  const reducer = (state=defaultState, action) => {\n    switch (action.type) {\n        // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n        case UPDATE_PRODUCTS:\n            return {\n            ...state,\n            products: [...action.products]\n            };\n        // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n        case UPDATE_CATEGORIES:\n            return {\n            ...state,\n            categories: [...action.categories]\n            };\n        // if action type value is the value of `UPDATE_CURRENT_CATEGORY`, return a new string instead of an array\n        case UPDATE_CURRENT_CATEGORY:\n            return {\n                ...state,\n                currentCategory: action.currentCategory\n            };\n        // UI Cart case\n        case ADD_TO_CART:\n          return {\n            ...state,\n            cartOpen: true,\n            cart: [...state.cart, action.product]\n          };\n        // add multiple to cart\n        case ADD_MULTIPLE_TO_CART:\n          return {\n            ...state,\n            cart: [...state.cart, ...action.products],\n          };\n        // Remove from cart\n        case REMOVE_FROM_CART:\n          let newState = state.cart.filter(product => {\n            return product._id !== action._id;\n          });\n        \n          return {\n            ...state,\n            cartOpen: newState.length > 0,\n            cart: newState\n          };\n        case UPDATE_CART_QUANTITY:\n          return {\n            ...state,\n            cartOpen: true,\n            cart: state.cart.map(product => {\n              if (action._id === product._id) {\n                product.purchaseQuantity = action.purchaseQuantity;\n              }\n              return product;\n            })\n          };\n\n        case CLEAR_CART:\n          return {\n            ...state,\n            cartOpen: false,\n            cart: []\n          };\n        \n        case TOGGLE_CART:\n          return {\n            ...state,\n            cartOpen: !state.cartOpen\n          };\n  \n          // if no changes, leave as default values\n      default:\n        return state;\n    }\n  };\n\n\n  export default reducer;\n\n  // commented out in favor of redux logic\n  // export function useProductReducer(initialState) {\n  //   return useReducer(reducer, initialState);\n  // }","import { createStore } from \"redux\";\nimport reducer from \"../utils/reducers\";\n\nconst store = createStore(reducer);\nexport default store;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_USER } from \"../utils/queries\";\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">\n          ← Back to Products\n          </Link>\n\n        {user ? (\n          <>\n            <h2>Order History for {user.firstName} {user.lastName}</h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>{new Date(parseInt(order.purchaseDate)).toLocaleDateString()}</h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img\n                          alt={name}\n                          src={`/images/${image}`}\n                        />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n\n      </div>\n\n    </>)\n\n};\n\nexport default OrderHistory;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nimport Home from \"./pages/Home\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Nav from \"./components/Nav\";\nimport Success from \"./pages/Sucess\";\n// redux hook and store\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport OrderHistory from \"./pages/OrderHistory\";\n\n// custom React Hook\n// commented out in favor of redux\n// import { StoreProvider } from \"./utils/GlobalState\";\n\n\n\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem('id_token')\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    })\n  },\n  uri: '/graphql',\n})\n\n// Custom React Hook called added as StoreProvider container\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          {/*<StoreProvider>*/}\n          <Provider store={store}>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route component={NoMatch} />\n              \n            </Switch>\n          </Provider>\n          {/*</StoreProvider>*/}\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}